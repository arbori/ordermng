openapi: 3.0.3
info:
  title: Swagger Order Manager - OpenAPI 3.0
  description: |-
    Decskill - Marcelo Arbori
    
    This is a simple exercise, a simple order manager. You should develop an API where users can create and manage orders. Items can be ordered and orders are automatically fulfilled as soon as the item stock allows it.
    
    Specification
    
    The system should be able to provide the following features:
      
      1 - create, read, update and delete and list all entities;
      
      2 - when an order is created, it should try to satisfy it with the current stock.;
      
      3 - when a stock movement is created, the system should try to attribute it to an order that isn't complete;
      
      4 - when an order is complete, send a notification by email to the user that created it;
      
      5 - trace the list of stock movements that were used to complete the order, and vice-versa;
      
      6 - show current completion of each order;
      
      7 - Write a log file with: orders completed, stock movements, email sent and errors.

      Entities
      - Item
                  
                  > name
      
      - StockMovement
                  
                  > creationDate
                  > Item
                  > quantity
      
      - Order
                  
                  > creationDate
                  > Item
                  > quantity
                  > User (who created the order)
      
      - User
                  
                  > name
                  > email

    Requirements:
    - The API should make by java 8 with Spring Boot + Spring JPA or Jave EE + Hibernate, PostgreSQL, GIT, log4j (or other);
    - You should provide instructions on how to run the project and how to call the routes;

  contact:
    email: marcelo.arbori@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
tags:
  - name: item
    description: Item that can be ordered
paths:
  /item:
    post:
      tags:
        - item
      summary: Add a new item to the store
      description: Add a new item to the store
      operationId: addItem
      requestBody:
        description: Create a new item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
    get:
      tags:
        - item
      summary: List items
      description: List all items available
      operationId: listItems
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid status value
    put:
      tags:
        - item
      summary: Update an existing item
      description: Update an existing item by Id
      operationId: updateItem
      requestBody:
        description: Update an existent item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - item
      summary: Delete an item
      description: delete an item
      operationId: deleteItem
      parameters:
        - name: code
          in: header
          description: Item code to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid pet value
components:
  schemas:
    Item:
      type: object
      properties:
        code:
          type: string
          example: MAT4526-R
        name:
          type: string
          example: Hamer
  requestBodies:
    Item:
      description: Item that can be ordered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
