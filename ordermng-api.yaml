openapi: 3.0.3
info:
  title: Swagger Order Manager - OpenAPI 3.0
  description: |-
    Decskill - Marcelo Arbori
    
    This is a simple exercise, a simple order manager. You should develop an API where users can create and manage orders. Items can be ordered and orders are automatically fulfilled as soon as the item stock allows it.
    
    Specification
    
    The system should be able to provide the following features:
      
      1 - create, read, update and delete and list all entities;
      
      2 - when an order is created, it should try to satisfy it with the current stock.;
      
      3 - when a stock movement is created, the system should try to attribute it to an order that isn't complete;
      
      4 - when an order is complete, send a notification by email to the user that created it;
      
      5 - trace the list of stock movements that were used to complete the order, and vice-versa;
      
      6 - show current completion of each order;
      
      7 - Write a log file with: orders completed, stock movements, email sent and errors.

      Entities
      - Item
                  
                  > name
      
      - StockMovement
                  
                  > creationDate
                  > Item
                  > quantity
      
      - Order
                  
                  > creationDate
                  > Item
                  > quantity
                  > User (who created the order)
      
      - User
                  
                  > name
                  > email

    Requirements:
    - The API should make by java 8 with Spring Boot + Spring JPA or Jave EE + Hibernate, PostgreSQL, GIT, log4j (or other);
    - You should provide instructions on how to run the project and how to call the routes;

  contact:
    email: marcelo.arbori@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
tags:
  - name: item
    description: Item that can be ordered
paths:
  /item:
    post:
      tags:
        - item
      summary: Add a new item to the store
      description: Add a new item to the store
      operationId: addItem
      requestBody:
        description: Create a new item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '405':
          description: Invalid input
    get:
      tags:
        - item
      summary: List items
      description: List all items available
      operationId: listItems
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid status value
    put:
      tags:
        - item
      summary: Update an existing item
      description: Update an existing item by Id
      operationId: updateItem
      requestBody:
        description: Update an existent item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - item
      summary: Delete an item
      description: delete an item
      operationId: deleteItem
      parameters:
        - name: id
          in: header
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: header
          description: ''
          required: false
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
  /user:
    post:
      tags:
        - user
      summary: Add a new user to the store
      description: Add a new user to the store
      operationId: addUser
      requestBody:
        description: Create a new user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '405':
          description: Invalid input
    get:
      tags:
        - user
      summary: List users
      description: List all users available
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
    put:
      tags:
        - user
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - user
      summary: Delete an user
      description: delete an user
      operationId: deleteUser
      parameters:
        - name: id
          in: header
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: header
          description: ''
          required: false
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
  /order:
    post:
      tags:
        - order
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '405':
          description: Invalid input
    get:
      tags:
        - order
      summary: List order
      description: List all order available
      operationId: listOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - order
      summary: Delete an order
      description: delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: header
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /moviment:
    post:
      tags:
        - moviment
      summary: Add a new stock moviment to the store
      description: Add a new stock moviment to the store
      operationId: addStockMoviment
      requestBody:
        description: Create a new stock moviment in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMoviment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMoviment'          
        '405':
          description: Invalid input
    get:
      tags:
        - moviment
      summary: List stock moviment
      description: List all stock moviment available
      operationId: listStockMoviment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockMoviment'
        '400':
          description: Invalid status value
    put:
      tags:
        - moviment
      summary: Update an existing stock moviment
      description: Update an existing stock moviment by Id
      operationId: updateStockMoviment
      requestBody:
        description: Update an existent stock moviment in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMoviment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMoviment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - moviment
      summary: Delete an stock moviment
      description: delete an stock moviment
      operationId: deleteStockMoviment
      parameters:
        - name: id
          in: header
          description: Stock moviment id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        name:
          type: string
          example: Chair
        active:
          type: boolean
          example: true
    User:
      type: object
      properties:
        id:openapi: 3.0.3
info:
  title: Swagger Order Manager - OpenAPI 3.0
  description: |-
    Decskill - Marcelo Arbori
    
    This is a simple exercise, a simple order manager. You should develop an API where users can create and manage orders. Items can be ordered and orders are automatically fulfilled as soon as the item stock allows it.
    
    Specification
    
    The system should be able to provide the following features:
      
      1 - create, read, update and delete and list all entities;
      
      2 - when an order is created, it should try to satisfy it with the current stock.;
      
      3 - when a stock movement is created, the system should try to attribute it to an order that isn't complete;
      
      4 - when an order is complete, send a notification by email to the user that created it;
      
      5 - trace the list of stock movements that were used to complete the order, and vice-versa;
      
      6 - show current completion of each order;
      
      7 - Write a log file with: orders completed, stock movements, email sent and errors.

      Entities
      - Item
                  
                  > name
      
      - StockMovement
                  
                  > creationDate
                  > Item
                  > quantity
      
      - Order
                  
                  > creationDate
                  > Item
                  > quantity
                  > User (who created the order)
      
      - User
                  
                  > name
                  > email

    Requirements:
    - The API should make by java 8 with Spring Boot + Spring JPA or Jave EE + Hibernate, PostgreSQL, GIT, log4j (or other);
    - You should provide instructions on how to run the project and how to call the routes;

  contact:
    email: marcelo.arbori@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
tags:
  - name: item
    description: Item that can be ordered
paths:
  /item:
    post:
      tags:
        - item
      summary: Add a new item to the store
      description: Add a new item to the store
      operationId: addItem
      requestBody:
        description: Create a new item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '405':
          description: Invalid input
    get:
      tags:
        - item
      summary: List items
      description: List all items available
      operationId: listItems
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Invalid status value
    put:
      tags:
        - item
      summary: Update an existing item
      description: Update an existing item by Id
      operationId: updateItem
      requestBody:
        description: Update an existent item in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - item
      summary: Delete an item
      description: delete an item
      operationId: deleteItem
      parameters:
        - name: id
          in: header
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: header
          description: ''
          required: false
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
  /user:
    post:
      tags:
        - user
      summary: Add a new user to the store
      description: Add a new user to the store
      operationId: addUser
      requestBody:
        description: Create a new user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '405':
          description: Invalid input
    get:
      tags:
        - user
      summary: List users
      description: List all users available
      operationId: listUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
    put:
      tags:
        - user
      summary: Update an existing user
      description: Update an existing user by Id
      operationId: updateUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - user
      summary: Delete an user
      description: delete an user
      operationId: deleteUser
      parameters:
        - name: id
          in: header
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: header
          description: ''
          required: false
          schema:
            type: string
      responses:
        '400':
          description: Invalid pet value
  /order:
    post:
      tags:
        - order
      summary: Add a new order to the store
      description: Add a new order to the store
      operationId: addOrder
      requestBody:
        description: Create a new order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '405':
          description: Invalid input
    get:
      tags:
        - order
      summary: List order
      description: List all order available
      operationId: listOrders
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid status value
    put:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      requestBody:
        description: Update an existent order in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - order
      summary: Delete an order
      description: delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: header
          description: Order id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
  /moviment:
    post:
      tags:
        - moviment
      summary: Add a new stock moviment to the store
      description: Add a new stock moviment to the store
      operationId: addStockMoviment
      requestBody:
        description: Create a new stock moviment in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMoviment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMoviment'          
        '405':
          description: Invalid input
    get:
      tags:
        - moviment
      summary: List stock moviment
      description: List all stock moviment available
      operationId: listStockMoviment
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockMoviment'
        '400':
          description: Invalid status value
    put:
      tags:
        - moviment
      summary: Update an existing stock moviment
      description: Update an existing stock moviment by Id
      operationId: updateStockMoviment
      requestBody:
        description: Update an existent stock moviment in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMoviment'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockMoviment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Item not found
        '405':
          description: Validation exception
    delete:
      tags:
        - moviment
      summary: Delete an stock moviment
      description: delete an stock moviment
      operationId: deleteStockMoviment
      parameters:
        - name: id
          in: header
          description: Stock moviment id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        name:
          type: string
          example: Chair
        active:
          type: boolean
          example: true
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        name:
          type: string
          example: Joe
        email:
          type: string
          example: joe@gmail.com
        active:
          type: boolean
          example: true
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        creationDate:
          type: string
          format: date-time
          example: 2021-10-18T08:32:28Z
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
          example: 42
        user:
          $ref: '#/components/schemas/User'
        active:
          type: boolean
          example: true
    StockMoviment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        creationDate:
          type: string
          format: date-time
          example: 2021-10-18T08:32:28Z
        quantity:
          type: integer
          example: 42
        order:
          type: object
        active:
          type: boolean
          example: true
  requestBodies:
    Item:
      description: Item that can be ordered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    User:
      description: User of that can make orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Order:
      description: Order to bay items 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
          type: integer
          format: int64
          example: 29843
        name:
          type: string
          example: Joe
        email:
          type: string
          example: joe@gmail.com
        active:
          type: boolean
          example: true
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        creationDate:
          type: string
          format: date-time
          example: 2021-10-18T08:32:28Z
        item:
          type: Item
        quantity:
          type: integer
          example: 42
        user:
          type: User
        active:
          type: boolean
          example: true
    StockMoviment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 29843
        creationDate:
          type: string
          format: date-time
          example: 2021-10-18T08:32:28Z
        quantity:
          type: integer
          example: 42
        order:
          type: object
        active:
          type: boolean
          example: true
  requestBodies:
    Item:
      description: Item that can be ordered
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
    User:
      description: User of that can make orders
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Order:
      description: Order to bay items 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Order'
